@startuml
'https://plantuml.com/class-diagram

'abstract class AbstractList
'abstract AbstractCollection
'interface List
'interface Collection
'
'List <|-- AbstractList
'Collection <|-- AbstractCollection
'
'Collection <|- List
'AbstractCollection <|- AbstractList
'AbstractList <|-- ArrayList
'
'class ArrayList {
'Object[] elementData
'size()
'}
'
'enum TimeUnit {
'DAYS
'HOURS
'MINUTES
'}

class RpcRequest implements Serializable{
    //Rpc请求实体类
    - static final long serialVersionUID
    - String requestId//输出和输入的序号应该相同
    - String interfaceName//接口的全限定名
    - String methodName//方法名称
    - Object[] parameters//输入参数
    - Class<?>[] paramTypes//参数类型
    - String version//版本号,用于匹配程序版本
    - String group//用于处理一个接口多个实现类的情况
    + RpcServiceProperties toRpcProperties()//将改请求信息转换为Rpc属性方便分析
}
RpcRequest --> RpcServiceProperties
RpcServiceProperties --> RpcRequest
class RpcServiceProperties {
    //Rpc名称属性，主要可以专门生成保存在zookeeper上的服务形式。用于寻找服务端的实体类
    - String version;
    - String group;
    - String serviceName;//接口的全限定名
    + String toRpcServiceName()//获取该请求的服务名称
}


RpcRequest --> RpcRequestTransport
interface RpcRequestTransport{
    //Rpc传输接口
    + Object sendRpcRequest(RpcRequest)//发送实体类
}

class SocketRpcClient implements RpcRequestTransport {
 基于 Socket 传输 RpcRequest
 - 注意：基于socket方式的发送返回的直接是RpcResponse返回对象，
    这样是没有考虑到多线程并发情况的
    //用于帮助寻找服务器IP
    - final ServiceDiscovery serviceDiscovery
    //用于帮助序列化对象
    - final SerializeUtil serializeUtil
}

class NettyRpcClient implements RpcRequestTransport {
 基于 Netty 传输 RpcRequest
 - 基于netty方式的发送考虑了并发使用同一个channel的问题，首先
   通过一个ChannerProvider类专门提供到某个地址的channel，然后
   通过异步future机制CompletableFuture获取返回类数据
    //用于帮助寻找服务器IP
    - final ServiceDiscovery serviceDiscovery
    //用于帮助序列化对象
    - final SerializeUtil serializeUtil
    //专门用于获取通道，防止多个创建
    - final ChannerProvider channerProvider
    //根据RequestID完成CompletableFuture的异步数据注入
    - final UnprocessedRequests unprocessedRequests
}

UnprocessedRequests --o NettyRpcClient
class UnprocessedRequests {
    //ConcurrentHashMap，根据requestId保存所有的待实现CompletableFuture对象
    - static final Map<String, CompletableFuture<RpcResponse<Object>>>
    //存入新的CompletableFuture
    + void put(String requestId, CompletableFuture<RpcResponse<Object>> future)
    //根据requestId完成CompletableFuture
    + void complete(RpcResponse<Object> rpcResponse)
}

ChannelProvider --o NettyRpcClient
class ChannelProvider {
    //统一管理所有的通道
    - final Map<String, Channel> channelMap
    //根据InetSocketAddress获取channel，没有则创建
    Channel get(InetSocketAddress inetSocketAddress)
    //当channel使用完后，去除某个channel
    void remove(InetSocketAddress inetSocketAddress)
}

SerializeUtil --o SocketRpcClient
SerializeUtil --o NettyRpcClient
interface SerializeUtil {
    序列化并发送对象&&反序列化接收对象
    + <T> void serializeAndSend(BufferedOutputStream bos, T obj,Class<T> clazz);
    + <T> Object recieveAndSerialize(BufferedInputStream bis, Class<T> clazz);
}

SocketRpcClient o-- serviceDiscovery
NettyRpcClient o-- serviceDiscovery
interface serviceDiscovery{
    服务发现类接口
    + InetSocketAddress lookupService(String rpcServiceName)
    + InetSocketAddress: 根据服务名称寻找服务器地址
}

class ZkServiceDiscovery implements serviceDiscovery {
    基于zukeeper的服务发现类
    //用于负载均衡策略的实现
    - final LoadBalance loadBalance;
}

class CuratorUtils {
    zookeeper工具类
}

CuratorUtils --> ZkServiceDiscovery
ZkServiceDiscovery o-- LoadBalance
interface LoadBalance{
    负载均衡类接口
    + selectServiceAddress:根据服务器地址列表选择一个服务器地址
    + String selectServiceAddress(List<String> serviceAddresses, String rpcServiceName)
}

class ConsistentHashLoadBalance implements LoadBalance{
    一致性hash选择负载
}

class RandomLoadBalance implements LoadBalance{
    随机负载选择
}
RpcClientProxy o-- RpcRequestTransport
RpcClientProxy o-- RpcServiceProperties

class RpcClientProxy{
    动态代理工具类
    - final RpcRequestTransport rpcRequestTransport;
    -final RpcServiceProperties rpcServiceProperties;
    + <T> T getProxy(Class<T> clazz)//获取代理类对象
    + //invoke：代理类对象的处理逻辑
    + Object invoke(Object proxy, Method method, Object[] args)
}

interface HelloService {
  + String hello(Hello hello)
}
RpcClientProxy <-- HelloService

RpcClientProxy --> HelloServiceImpl:creat

HelloServiceImpl -->远程过程调用都已经封装好了_直接调用方法即可
class HelloServiceImpl implements HelloService {
}
@enduml